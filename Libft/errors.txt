       ║             libft            ║
                        ╚══════════════════════════════╝
✔ Preparing framework
✔ Executing: norminette
✔ Executing: make fclean all (no bonus)
ℹ Executing: libft-war-machine (https://github.com/y3ll0w42/libft-war-machine)
--------------------------------------------------------------------------------
|                              COMPILING LIBFT                                 |
--------------------------------------------------------------------------------
rules:
all        $(NAME)       fclean       re           clean       bonus     libft.a
ok         ok            ok           ok           ok          missing   found

FUNCTION         TESTS                RESULT
ft_isalpha       ✓✓✓✓✓✓✓              OK
ft_isdigit       ✓✓✓✓✓✓✓              OK
ft_isalnum       ✓✓✓✓✓✓✓              OK
ft_isascii       ✓✓✓✓✓✓✓✓             OK
ft_isprint       ✓✓✓✓✓✓✓              OK
ft_strlen        ✓✓✓✓✓✓               OK
ft_memset        ✓✓✓✓                 OK
ft_bzero         ✓✓                   OK
ft_memcpy        ✓✓✓                  OK
ft_memmove       ✓✓✓✓✓                OK
ft_strlcpy       ✓✓✓✓✓                OK
ft_strlcat       ✓✓✓✓✓✓✓✓✓            OK
ft_toupper       ✓✓✓✓✓✓✓              OK
ft_tolower       ✓✓✓✓✓✓✓              OK
ft_strchr        ✓✓✓✓✓✓               OK
ft_strrchr       ✓✓✓✓✓✓✓✓             OK
ft_strncmp       ✓✓✓✓✓✓✓✓✓✓✓          OK
ft_memchr        ✓✓✓✓✓✓               OK
ft_memcmp        ✓✓✓✓✓✓✓✓✓            OK
ft_strnstr       ✓✓✓✓✓✓✓✓✓✓           OK
ft_atoi          ✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓✓  OK
ft_calloc        ✓                    OK
ft_strdup        ✓                    OK
ft_substr        ✓✓✓✓✗                KO
ft_strjoin       ✓✓✓✓                 OK
ft_strtrim       ✗✗✗✗✓                KO
ft_split         ✗✓✗✓✓✓               KO
ft_itoa          ✓✓✓✓✓✓✓✓✓✓           OK
ft_strmapi       ✓                    OK
ft_striteri      ✓                    OK
ft_putchar_fd    ✓✓✓✓✓✓✓              OK
ft_putstr_fd     ✓✓✓✓                 OK
ft_putendl_fd    ✓✓✓✓                 OK
ft_putnbr_fd     ✓✓✓✓✓✓✓✓✓            OK

Abort: A  Bus error: B  Segmentation fault: S  Timeout: T

More information in: /francinette/temp/libft/war-machine/deepthought

Errors in substr: /francinette/temp/libft/war-machine/tests/Part2_functions/ft_substr
Test 5:
    char *bullshit;
    if (!(strsub = ft_substr(str, 400, 20)))
        ft_print_result("NULL");
    else
    {
        bullshit = (char *)&strsub[30];
        bullshit = "FULL BULLSHIT";
        if (strsub)
            ft_print_result(strsub);
        else
            ft_print_result("rip");
    }
    if (str == strsub)
        ft_print_result("\nA new string was not returned");
    (void)bullshit;
Expected (cat -e test05.output):

Your result (cat -e user_output_test05):
NULL
Errors in strtrim: /francinette/temp/libft/war-machine/tests/Part2_functions/ft_strtrim
Test 1:
    char s1[] = "lorem \n ipsum \t dolor \n sit \t amet";
    if (!(strtrim = ft_strtrim(s1, " ")))
        ft_print_result("NULL");
    else
        ft_print_result(strtrim);
    if (strtrim == s1)
        ft_print_result("\nA new string was not returned");
Expected (cat -e test01.output):
lorem $
 ipsum 	 dolor $
 sit 	 amet
Your result (cat -e user_output_test01):

Test 2:
    char s1[] = "lorem ipsum dolor sit amet";
    if (!(strtrim = ft_strtrim(s1, "te")))
        ft_print_result("NULL");
    else
        ft_print_result(strtrim);
    if (strtrim == s1)
        ft_print_result("\nA new string was not returned");
Expected (cat -e test02.output):
lorem ipsum dolor sit am
Your result (cat -e user_output_test02):

Test 3:
    char s1[] = " lorem ipsum dolor sit amet";
...

File too large. To see full report open: /francinette/temp/libft/war-machine/errors.log

✔ Compiling tests: libftTester (https://github.com/Tripouille/libftTester)
ℹ Testing:
ft_isalpha	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 
ft_isdigit	: 1.OK 2.OK 3.OK 4.OK 
ft_isalnum	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK 
ft_isascii	: 1.OK 2.OK 3.OK 4.OK 
ft_isprint	: 1.OK 2.OK 3.OK 4.OK 
ft_strlen	: 1.OK 2.OK 
ft_memset	: 1.OK 2.OK 
ft_bzero	: 1.OK 2.OK 3.OK 
ft_memcpy	: 1.OK 2.OK 3.OK 
ft_memmove	: 1.OK 2.OK 3.OK 4.OK 
ft_strlcpy	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 
ft_strlcat	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK 13.OK 14.OK 15.OK 16.OK 17.OK 
ft_toupper	: 1.OK 2.OK 3.OK 4.OK 
ft_tolower	: 1.OK 2.OK 3.OK 4.OK 
ft_strchr	: 1.OK 2.OK 3.OK 4.OK 5.OK 
ft_strrchr	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 
ft_strncmp	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK 13.OK 14.OK 15.OK 16.OK 
ft_memchr	: 1.OK 2.OK 3.OK 4.OK 5.OK 
ft_memcmp	: 1.OK 2.OK 3.OK 4.OK 5.OK 
ft_strnstr	: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK 13.OK 14.OK 
ft_atoi		: 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK 13.OK 14.OK 15.OK 16.OK 17.OK 
ft_calloc	: 1.OK 2.MOK 
ft_strdup	: 1.OK 2.MOK 3.OK 4.MOK 
ft_substr	: 1.OK 2.MOK 3.OK 4.MOK 5.SIGSEGV
ft_strjoin	: 1.OK 2.MOK 3.OK 4.MOK 5.OK 6.MOK 7.OK 8.MOK 
ft_strtrim	: 1.OK 2.MOK 3.OK 4.MOK 5.OK 6.MOK 7.SIGSEGV
ft_split	: 1.MKO 2.OK 3.MOK 4.OK 5.MOK 6.KO 7.OK 8.OK 9.KO 10.OK 11.MOK 12.OK 13.OK 14.MOK 15.OK 16.MOK 17.OK 18.OK 19.MKO 20.OK 21.KO 22.MOK 23.OK 24.OK 25.MKO 26.OK 27.MOK 28.KO 29.MOK 30.OK 31.MOK 32.OK 33.MOK 34.OK 35.MOK 36.OK 37.MOK 38.OK 39.MOK 40.OK 41.MOK 42.OK 
ft_itoa		: 1.OK 2.MOK 3.OK 4.MOK 5.OK 6.MOK 7.OK 8.MOK 9.OK 10.MOK 11.OK 12.MOK 
ft_strmapi	: 1.OK 2.MOK 3.OK 4.MOK 
ft_striteri	: 1.OK 2.OK 3.OK 
ft_putchar_fd	: 1.OK 
ft_putstr_fd	: 1.OK 
ft_putendl_fd	: 1.OK 
ft_putnbr_fd	: 1.OK 2.OK 3.OK 4.OK 5.OK 

MKO: test about your malloc size (this shouldn't be tested by moulinette)

Errors in:

For /francinette/tests/libft/Tripouille/tests/ft_substr_test.cpp:
SIGSEGV 27: 	/* 5 */ check(!strcmp(s, ""));

For /francinette/tests/libft/Tripouille/tests/ft_strtrim_test.cpp:
SIGSEGV 31: 	/* 7 */ check(!strcmp(s, ""));

For /francinette/tests/libft/Tripouille/tests/ft_split_test.cpp:
MKO 26: 	/* 1 */ mcheck(tab, sizeof(char *) * 3);
KO  34: 	/* 6 */ check(tab[2] == NULL);
KO  43: 	/* 9 */ check(tab[0] == NULL);
MKO 72: 	/* 19 */ mcheck(tab, sizeof(char *) * 2);
KO  74: 	/* 21 */ check(tab[1] == NULL);
MKO 86: 	/* 25 */ mcheck(tab, sizeof(char *) * 2);
KO  89: 	/* 28 */ check(tab[1] == NULL);

✔ Compiling tests: libft-unit-test (https://github.com/alelievr/libft-unit-test)
ℹ Testing:
ft_isalpha      : [OK] 
ft_isdigit      : [OK] 
ft_isalnum      : [OK] 
ft_isascii      : [OK] 
ft_isprint      : [OK] 
ft_strlen       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memset       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero        : [OK] [OK] [OK] [OK] 
ft_memcpy       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] 
[crash]: your memcpy does not behave well with NULL as both params with size

ft_memmove      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] [OK] 
[crash]: your memmove does not well with NULL as both parameters and size

ft_strlcpy      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strlcat      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_toupper      : [OK] 
ft_tolower      : [OK] 
ft_strchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strrchr      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncmp      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memcmp       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strnstr      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_atoi         : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_calloc       : [OK] [OK] [OK] [OK] [OK] 
ft_strdup       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_substr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] 
[crash]: your substr does not work when start >= ft_strlen(s)

ft_strjoin      : [OK] [OK] [OK] [OK] [OK] 
ft_strtrim      : [FAILED] [FAILED] [OK] [CRASH] [OK] [OK] [OK] [OK] [FAILED] 
[fail]: your strtrim does not work with basic input
[fail]: your strtrim does not work with basic input
[crash]: your strtrim does not work with full blank input
[fail]: your strtrim does not set \0 to the end of the string

ft_split        : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] [OK] [CRASH] 
[crash]: your split does not work with basic input
[crash]: your split does not work with basic input

ft_itoa         : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strmapi      : [OK] [OK] [OK] [OK] [OK] 
ft_striteri     : [OK] [OK] 
ft_putchar_fd   : [OK] [OK] 
ft_putstr_fd    : [OK] [OK] 
ft_putendl_fd   : [OK] [OK] 
ft_putnbr_fd    : [OK] [OK] [OK] [OK] [OK] 

[crash]: your memcpy does not behave well with NULL as both params with size
 Test code:
 	ft_memcpy(((void*)0), ((void*)0), 3);
 
 
 [crash]: your memmove does not well with NULL as both parameters and size
 Test code:
 	ft_memmove(((void*)0), ((void*)0), 5);
 
 
 [crash]: your substr does not work when start >= ft_strlen(s)
 Test code:
 	char *str = "01234";
 	size_t size = 10;
 	char *ret = ft_substr(str, 10, size);
 
 	if (!strncmp(ret, "", 1))
 	{
 		free(ret);
 		exit(TEST_SUCCESS);
 	}
 	free(ret);
 	exit(TEST_FAILED);
 
 
 [fail]: your strtrim does not work with basic input
 Test code:
 	char *s1 = "   \t  \n\n \t\t  \n\n\nHello \t  Please\n Trim me !\n   \n \n \t\t\n  ";
 	char *s2 = "Hello \t  Please\n Trim me !";
 	char *ret = ft_strtrim(s1, " \n\t");
 
 	if (!strcmp(ret, s2))
 		exit(TEST_SUCCESS);
 	exit(TEST_FAILED);
 
 Diffs:
      strtrim: |Hello 	  Please
  Trim me !|
   ft_strtrim: |Hello 	  Please
  Trim me !e_t size = 10;|
 
 [fail]: your strtrim does not work with basic input
 Test code:
 	char *s1 = "   \t  \n\n \t\t  \n\n\nHello \t  Please\n Trim me !";
 	char *s2 = "Hello \t  Please\n Trim me !";
 	char *ret = ft_strtrim(s1, " \n\t");
 
 	if (!strcmp(ret, s2))
 		exit(TEST_SUCCESS);
 	exit(TEST_FAILED);
...

File too large. To see full report open: /francinette/temp/libft/alelievr/result.log

✔ Compiling tests: fsoares (my own)
ℹ Testing:
ft_isalpha      : OK
ft_isdigit      : OK
ft_isalnum      : OK
ft_isascii      : OK
ft_isprint      : OK
ft_strlen       : OK
ft_memset       : OK
ft_bzero        : OK
ft_memcpy       : OK
ft_memmove      : OK
ft_strlcpy      : OK
ft_strlcat      : OK
ft_toupper      : OK
ft_tolower      : OK
ft_strchr       : OK
ft_strrchr      : KO
ft_strncmp      : OK
ft_memchr       : OK
ft_memcmp       : OK
ft_strnstr      : OK
ft_atoi         : OK
ft_calloc       : OK
ft_strdup       : OK
ft_substr       : KO
ft_strjoin      : OK
ft_strtrim      : KO
ft_split        : KO
ft_itoa         : OK
ft_strmapi      : OK
ft_striteri     : OK
ft_putchar_fd   : OK
ft_putstr_fd    : OK
ft_putendl_fd   : OK
ft_putnbr_fd    : OK

Errors found:
For ft_strrchr, in /francinette/tests/libft/fsoares/test_strrchr.c:

Error in test 6: ft_strrchr(0x56257ab3c021: "teste", 1024: '\0'): expected: 0x56257ab3c026, yours: (nil)

For ft_substr, in /francinette/tests/libft/fsoares/test_substr.c:

Error in test 3: ft_substr("", 1, 1): expected: "", got: <NULL>
Error in test 3: ft_substr("", 1, 1): not enough memory allocated, needed: 1, reserved: 0
Could not find the corresponding allocation or the pointer (nil)
Error in test 3: ft_substr("", 1, 1): 
Memory leak: 0x564bbc4458b0 - 4096 bytes
You failed to free the memory allocated at:
Error in test 4: ft_substr("hola", 4294967295, 0): expected: "", got: <NULL>
Error in test 4: ft_substr("hola", 4294967295, 0): not enough memory allocated, needed: 1, reserved: 0
Could not find the corresponding allocation or the pointer (nil)
Error in test 6: ft_substr("hola", 4294967295, 18446744073709551615): expected: "", got: <NULL>
Error in test 6: ft_substr("hola", 4294967295, 18446744073709551615): not enough memory allocated, needed: 1,
reserved: 0
Could not find the corresponding allocation or the pointer (nil)
Error in test 23: ft_substr("hola", 5, 2): expected: "", got: <NULL>
Error in test 23: ft_substr("hola", 5, 2): not enough memory allocated, needed: 1, reserved: 0
Could not find the corresponding allocation or the pointer (nil)

For ft_strtrim, in /francinette/tests/libft/fsoares/test_strtrim.c:

Error in test 2: ft_strtrim("abcd", ""): expected: "abcd", got: "abcd\021"
Error in test 2: ft_strtrim("abcd", ""): 
Memory leak: 0x55dc947b68b0 - 4096 bytes
You failed to free the memory allocated at:
Error in test 4: ft_strtrim(" . abcd", " "): expected: ". abcd", got: ". abcd\021"
Error in test 5: ft_strtrim("ab cd  f    ", " "): expected: "ab cd  f", got: "ab cd  f\021"
Error in test 6: ft_strtrim("xxxz  test with x and z and x .  zx  xx z", "z x"): expected: "test with x and z
and x .", got: "test with x and z and x .\021"
Error in test 7: ft_strtrim("   abxfg  ", "x"): expected: "   abxfg  ", got: "   abxfg  \021"
Error in test 8: ft_strtrim(".teste, bla ,.,.", ",."): expected: "teste, bla ", got: "teste, bla \021"

For ft_split, in /francinette/tests/libft/fsoares/test_split.c:

Error in test 1: ft_split("hello!", 32:' '): 
Memory leak: 0x55aa80cba8d0 - 7 bytes
You failed to free the memory allocated at:
Error in test 2: ft_split("xxxxxxxxhello!", 120:'x'): 
Memory leak: 0x55aa80cba8f0 - 7 bytes
You failed to free the memory allocated at:

Error in test 3: ft_split("hello!zzzzzzzz", 122:'z'): 
Expected: ["hello!",  NULL]
Returned: ["hello!", "",  NULL]
Error in test 3: ft_split("hello!zzzzzzzz", 122:'z'): 
Memory leak: 0x55aa80cbb920 - 7 bytes
You failed to free the memory allocated at:
Memory leak: 0x55aa80cbb960 - 1 bytes
...

File too large. To see full report open: /francinette/temp/libft/fsoares/error.log


Summary: no bonus

Failed tests: memcpy, ft_substr, ft_strtrim, memmove, strtrim, ft_split, split, substr, strrchr

Passed tests: isalpha, isdigit, isalnum, isascii, isprint, strlen, memset, bzero, strlcpy, strlcat, toupper, tolower, strchr, strncmp, memchr, memcmp, strnstr, atoi, calloc, strdup, strjoin, itoa, strmapi, striteri, putchar_fd, putstr_fd, putendl_fd, putnbr_fd

